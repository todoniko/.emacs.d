#+TITLE: Emacs Configuration

* Base Editor
** Usex eXperience
[[http://ergoemacs.org/emacs/emacs_buffer_management.html][ibuffer]]
#+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme
  :ensure t
  :config (load-theme 'gruvbox-light-medium t))

(when (window-system)
  (split-window-right)
  (next-buffer)
  (set-frame-font "Source Code Pro-10"))

(defalias 'yes-or-no-p 'y-or-n-p)
(defalias 'list-buffers 'ibuffer)

;; Auto refresh buffers
(global-auto-revert-mode t)
(add-hook 'dired-mode-hook 'auto-revert-mode)

(setq global-auto-revert-non-file-buffers t ;; Also auto refresh dired
      auto-revert-verbose nil               ;; but be quiet about it
      visible-bell t                        ;; silence is key
      line-move-visual nil
      create-lockfiles nil)

(delete-selection-mode t)
(show-paren-mode t)
 #+END_SRC
 
** Backup
 #+BEGIN_SRC emacs-lisp
 (setq backup-directory-alist `(("." . "~/.emacs.d/backup"))
       backup-by-copying t
       delete-old-versions t
       kept-new-versions 6
       kept-old-versions 2
       version-control t)

 #+END_SRC

* Input
** Suggestion/Completion
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :delight
  :custom
  (company-idle-delay nil)
  (company-tooltip-align-annotations t)
  :hook (prog-mode . company-mode)
  :bind
  ("C-SPC" . company-complete))
#+END_SRC

** Template
#+BEGIN_SRC emacs-lisp :tangle no
(use-package yasnippet
  :ensure t
  :defer 7
  :delight
  :custom
  (yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-triggers-in-field t)
  :config
  (yas-global-mode))
#+END_SRC
* Navigation
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :delight
  :config
  (ivy-mode 1)
  ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  (setq ivy-use-virtual-buffers t)
  ;; number of result lines to display
  (setq ivy-height 10)
  ;; Show candidate index and total count
  (setq ivy-count-format "(%d/%d) ")
  ;; no regexp by default
  (setq ivy-initial-inputs-alist nil)
  ;; configure regexp engine.
  (setq ivy-re-builders-alist
	;; allow input not in order
        '((t   . ivy--regex-ignore-order))))

(use-package avy 
  :ensure t
  :bind (("C-'" . avy-goto-char-timer))
  :custom
  (avy-keys '(?e ?s ?a ?t ?o ?u ?n ?i ?c))
  (avy-style 'pre))

(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-x C-r" . counsel-recentf)
         ("C-c h i" . counsel-imenu)
         ("C-h v" . counsel-describe-variable)
         ("C-h f" . counsel-describe-function)))

(use-package swiper
  :ensure t
  :bind (("C-c s" . swiper)))
#+END_SRC
* Key Bindings
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :delight
  :custom (which-key-idle-delay 0.03)
  :config
  (which-key-mode))
#+END_SRC

* Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :defer t
  :commands 
  (org-mode
   org-capture
   org-store-link
   org-iswitchb)
  :custom
  (org-startup-indented t)
  (org-startup-folded t)
  (org-ellipsis " \u25bc")
  (org-agenda-files '("~/project/org/agenda.org"))
  (org-capture-templates
   '(
     ("b" "Bookmark" entry
      (file+headline "~/project/org/notes.org" "Bookmarks")
      "* [[%x][%?]] %^g\n\n" :empty-lines 1)
     ("d" "Dnevnik" entry
      (file+datetree "~/project/org/dnevnik.org")
      "* metaphor %?" :empty-lines 1)))
  :config
  (setq org-confirm-babel-evaluate nil
	    org-src-fontify-natively t
	    org-src-window-setup 'current-window
	    org-src-strip-leading-and-trailing-blank-lines t
	    org-src-preserve-indentation t
	    org-src-tab-acts-natively t)
  (org-babel-do-load-languages
     'org-babel-load-languages
     '((sql . t)
       (shell . t)
       (dot . t)
       (emacs-lisp . t)
       (js . t)
       (ocaml . t))))
#+END_SRC
* Source Control
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind (("C-c g" . magit-status)
         ("C-c G" . magit-dispatch)
         ("C-c m l" . magit-log-buffer-file)
         ("C-c m b" . magit-blame))
  :config
  (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  (setq magit-diff-refine-hunk t))
#+END_SRC
* Programming
** Syntax
#+BEGIN_SRC emacs-lisp :tangle no
(use-package flymake
  :ensure t
  :bind
  ("<f7>"  . flymake-goto-prev-error)
  ("<f8>"  . flymake-goto-next-error)
  :config
  (defun flymake--transform-mode-line-format (ret)
    "Change the output of `flymake--mode-line-format'."
    (setf (seq-elt (car ret) 1) " FM")
    ret)
  (advice-add #'flymake--mode-line-format
              :filter-return #'flymake--transform-mode-line-format))
#+END_SRC
** Documentation
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :ensure t
  :defer t
  :delight eldoc-mode)
#+END_SRC
** Ocaml
#+BEGIN_SRC emacs-lisp
(setq opam-p (executable-find "opam"))

(if opam-p
    (dolist (var (car (read-from-string (shell-command-to-string "opam config env --sexp"))))
      (setenv (car var) (cadr var))))

(setq opam-share
      (ignore-errors (car (process-lines "opam" "config" "var" "share"))))

(when (and opam-share (file-directory-p opam-share))
  (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share)))

(use-package ocp-indent :load-path opam-share)
(use-package ocp-index  :load-path opam-share)

(use-package tuareg
  :delight " T"
  :bind (:map tuareg-mode-map
	      ("<left>" . backward-word)
	      ("<right>" . forward-word))
  :mode (("\\.ml[ily]?$" . tuareg-mode)
	 ("\\.ocamlinit$" . tuareg-mode)
	 ("^dune$" . dune-mode)
	 ("^dune-project$" . dune-mode)
	 ("^dune-workspace$" . dune-mode))
  :config (load "tuareg-site-file"))
#+END_SRC
*** merlin
#+BEGIN_SRC emacs-lisp
(use-package merlin
  :custom
  (merlin-completion-with-doc t)
  (merlin-use-auto-complete-mode t)
  (merlin-error-check-then-move nil)
  (merlin-command 'opam)
  (merlin-error-after-save t)
  (merlin-locate-preference 'mli)
  (merlin-debug nil)
  :custom-face
  (merlin-type-face ((t (:inherit (highlight)))))
  :hook
  (tuareg-mode . merlin-mode))

(use-package merlin-eldoc 
  :ensure t
  :custom
  (eldoc-echo-area-use-multiline-p t) ; use multiple lines when necessary
  (merlin-eldoc-max-lines 8)          ; but not more than 8
  :hook (tuareg-mode . merlin-eldoc-setup))
#+END_SRC
*** utop
#+BEGIN_SRC emacs-lisp
(use-package utop
  :load-path opam-share
  :delight
  :init
  (defun my/setup-utop ()
    (setq utop-command "opam config exec -- utop -emacs")
    (utop-minor-mode))
  :custom
  (utop-edit-command t)
  :commands (utop-minor-mode)
  :hook (tuareg-mode . my/setup-utop))
#+END_SRC
*** dune
#+BEGIN_SRC emacs-lisp
(use-package dune-flymake :load-path opam-share)
(use-package dune :load-path opam-share)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package ocamlformat
  :commands (ocamlformat ocamlformat-before-save)
  :bind (:map tuareg-mode-map
              ("M-<iso-lefttab>" . ocamlformat)))
#+END_SRC
* Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "todoniko" 
      user-mail-address "todoniko@gmail.com"
      custom-file (expand-file-name "custom.el" user-emacs-directory))

(load custom-file) ;; custom setting in separate file
#+END_SRC
